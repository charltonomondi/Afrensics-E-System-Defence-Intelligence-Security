import { useState, useEffect } from 'react';
import Navigation from '@/components/Navigation';
import Footer from '@/components/Footer';
import SEO from '@/components/SEO';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import {
  Upload,
  Link as LinkIcon,
  Search,
  Shield,
  AlertTriangle,
  CheckCircle,
  XCircle,
  FileText,
  Globe,
  Download,
  ExternalLink,
  Clock,
  Database,
  Activity
} from 'lucide-react';
import { useTranslation } from 'react-i18next';
import malwareHeroImage from '@/assets/banner/malware.webp';
import securityLogsService from '@/services/securityLogsService';

/**
 * MalwareScanner Component
 *
 * Security Notes:
 * - API key is stored securely in environment variables (VITE_MALWARE_SCANNER_API_KEY)
 * - Never hardcode API keys in source code
 * - API key is validated on component initialization
 * - Error handling includes API key validation
 *
 * Environment Setup:
 * 1. Add VITE_MALWARE_SCANNER_API_KEY to .env file
 * 2. Restart development server after adding the key
 * 3. API key will be available in production builds
 *
 * Example .env entry:
 * VITE_MALWARE_SCANNER_API_KEY=your_api_key_here
 */

interface ScanResult {
  id: string;
  type: 'file' | 'url';
  input: string;
  status: 'pending' | 'completed' | 'failed';
  results: {
    malicious: number;
    suspicious: number;
    undetected: number;
    harmless: number;
    timeout: number;
  };
  detections: Array<{
    engine: string;
    result: string;
    category: string;
    method: string;
    community?: string;
  }>;
  threatLevel: 'clean' | 'low' | 'medium' | 'high' | 'critical';
  timestamp: string;
}

const MalwareScanner = () => {
  const { t } = useTranslation();
  const [activeTab, setActiveTab] = useState('file');
  const [file, setFile] = useState<File | null>(null);
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const [selectedResult, setSelectedResult] = useState<ScanResult | null>(null);
  const [showResultModal, setShowResultModal] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const [showLearnMoreModal, setShowLearnMoreModal] = useState(false);

  // Scan counters - persistent across sessions
  const [urlScansCount, setUrlScansCount] = useState(0);
  const [fileScansCount, setFileScansCount] = useState(0);

  // Live stats from backend
  const [liveEmailChecks, setLiveEmailChecks] = useState<number | null>(null);
  const [liveMalwareScans, setLiveMalwareScans] = useState<number | null>(null);
  const [liveMalwareUrlScans, setLiveMalwareUrlScans] = useState<number | null>(null);
  const [liveMalwareFileScans, setLiveMalwareFileScans] = useState<number | null>(null);
  const [statsLoading, setStatsLoading] = useState(false);
  const [statsError, setStatsError] = useState<string | null>(null);

  useEffect(() => {
    const fetchStats = async () => {
      setStatsLoading(true);
      setStatsError(null);
      try {
        const base = (import.meta as any).env?.VITE_API_BASE?.toString() || '/api';
        const res = await fetch(`${base}/be/stats`);
        if (!res.ok) throw new Error(`Failed to fetch stats: ${res.status}`);
        const data = await res.json();
        setLiveEmailChecks(Number(data.email_breach_checks || 0));
        setLiveMalwareScans(Number(data.malware_scans || 0));
        setLiveMalwareUrlScans(Number(data.malware_url_scans || 0));
        setLiveMalwareFileScans(Number(data.malware_file_scans || 0));
      } catch (e: any) {
        setStatsError('Statistics temporarily unavailable');
        console.warn('Failed to load live stats', e);
      } finally {
        setStatsLoading(false);
      }
    };
    fetchStats();
    const id = setInterval(fetchStats, 60_000);
    return () => clearInterval(id);
  }, []);

  // Load counters from localStorage on component mount
  useEffect(() => {
    const savedUrlScans = localStorage.getItem('malwareScanner_urlScans');
    const savedFileScans = localStorage.getItem('malwareScanner_fileScans');

    if (savedUrlScans) {
      const urlCount = parseInt(savedUrlScans, 10);
      setUrlScansCount(urlCount);
      console.log(`Loaded URL scan count from localStorage: ${urlCount}`);
    } else {
      console.log('No saved URL scan count found in localStorage');
    }

    if (savedFileScans) {
      const fileCount = parseInt(savedFileScans, 10);
      setFileScansCount(fileCount);
      console.log(`Loaded file scan count from localStorage: ${fileCount}`);
    } else {
      console.log('No saved file scan count found in localStorage');
    }
  }, []);

  // Save counters to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('malwareScanner_urlScans', urlScansCount.toString());
  }, [urlScansCount]);

  useEffect(() => {
    localStorage.setItem('malwareScanner_fileScans', fileScansCount.toString());
  }, [fileScansCount]);

  // Security: Validate API key on component initialization
  const apiKey = import.meta.env.VITE_MALWARE_SCANNER_API_KEY;

  // Warn in development if API key is missing
  if (import.meta.env.DEV && !apiKey) {
    console.warn('‚ö†Ô∏è VirusTotal API key not found. Please add VITE_MALWARE_SCANNER_API_KEY to your .env file for real scan functionality.');
    console.warn('üìù Your API key should look like: 459b7065c31c4a337e9694a5ac50016baa8a3504e6a519259405daa28eb1b6cb');
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) {
      // Validate file size (32MB limit)
      const maxSize = 32 * 1024 * 1024; // 32MB in bytes
      if (selectedFile.size > maxSize) {
        alert(`File size too large. Maximum size allowed is 32MB. Your file is ${(selectedFile.size / 1024 / 1024).toFixed(2)}MB.`);
        // Reset the input
        event.target.value = '';
        return;
      }

      console.log('File selected:', selectedFile.name, 'Size:', selectedFile.size, 'bytes');
      setFile(selectedFile);
      // Reset the input value to allow selecting the same file again
      event.target.value = '';
    } else {
      console.log('No file selected');
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);

    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles.length > 0) {
      const selectedFile = droppedFiles[0];

      // Validate file size (32MB limit)
      const maxSize = 32 * 1024 * 1024; // 32MB in bytes
      if (selectedFile.size > maxSize) {
        alert(`File size too large. Maximum size allowed is 32MB. Your file is ${(selectedFile.size / 1024 / 1024).toFixed(2)}MB.`);
        return;
      }

      console.log('File dropped:', selectedFile.name, 'Size:', selectedFile.size, 'bytes');
      setFile(selectedFile);
    }
  };

  const handleUrlScan = async () => {
    if (!url.trim()) return;

    // Increment URL scan counter
    setUrlScansCount(prev => {
      const newCount = prev + 1;
      console.log(`URL scan initiated. Count: ${prev} -> ${newCount}`);
      return newCount;
    });

    setIsScanning(true);
    try {
      // Get API key from environment variables
      const apiKey = import.meta.env.VITE_MALWARE_SCANNER_API_KEY;

      if (!apiKey) {
        console.error('Malware Scanner API key not found. Please check your environment variables.');
        throw new Error('API key not configured');
      }

      // Call VirusTotal API for URL analysis
      const vtResponse = await fetch(`https://www.virustotal.com/api/v3/urls`, {
        method: 'POST',
        headers: {
          'x-apikey': apiKey,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({ url: url })
      });

      if (!vtResponse.ok) {
        throw new Error(`VirusTotal API error: ${vtResponse.status}`);
      }

      const vtData = await vtResponse.json();
      const analysisId = vtData.data.id;

      // Wait a moment for analysis to start
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Get the analysis results
      const analysisResponse = await fetch(`https://www.virustotal.com/api/v3/analyses/${analysisId}`, {
        headers: {
          'x-apikey': apiKey,
        }
      });

      if (!analysisResponse.ok) {
        throw new Error(`Analysis API error: ${analysisResponse.status}`);
      }

      const analysisData = await analysisResponse.json();

      // Wait for analysis to complete (with timeout)
      let attempts = 0;
      const maxAttempts = 30; // 30 seconds max wait

      while (attempts < maxAttempts && analysisData.data.attributes.status !== 'completed') {
        await new Promise(resolve => setTimeout(resolve, 1000));
        attempts++;

        const retryResponse = await fetch(`https://www.virustotal.com/api/v3/analyses/${analysisId}`, {
          headers: {
            'x-apikey': apiKey,
          }
        });

        if (retryResponse.ok) {
          const retryData = await retryResponse.json();
          if (retryData.data.attributes.status === 'completed') {
            analysisData.data = retryData.data;
            break;
          }
        }
      }

      if (analysisData.data.attributes.status !== 'completed') {
        throw new Error('Analysis timed out or failed');
      }

      const attributes = analysisData.data.attributes;
      const stats = attributes.stats;
      const results = attributes.results || {};

      // Convert VirusTotal results to our format
      const detections = Object.entries(results).map(([engine, result]: [string, any]) => ({
        engine: engine,
        result: result.category === 'malicious' ? 'Malicious' :
                result.category === 'suspicious' ? 'Suspicious' : 'Clean',
        category: result.category || 'URL Analysis',
        method: result.method || 'API Analysis',
        community: result.category === 'malicious' ? '1/1' : '0/1'
      }));

      const mockResult: ScanResult = {
        id: `scan_${Date.now()}`,
        type: 'url',
        input: url,
        status: 'completed',
        results: {
          malicious: stats.malicious || 0,
          suspicious: stats.suspicious || 0,
          undetected: stats.undetected || 0,
          harmless: stats.harmless || 0,
          timeout: stats.timeout || 0
        },
        detections: detections,
        threatLevel: stats.malicious > 0 ? 'high' :
                    stats.suspicious > 0 ? 'medium' : 'clean',
        timestamp: new Date().toISOString()
      };


      setScanResults(prev => [mockResult, ...prev]);
      setSelectedResult(mockResult);
      setShowResultModal(true);
      // Persist URL scan input to Supabase
      try {
        await securityLogsService.logMalwareScan(url, 'url');
      } catch (persistErr) {
        console.warn('Failed to persist malware URL scan:', persistErr);
      }
    } catch (error) {
      console.error('Scan failed:', error);

      // Show user-friendly error message
      let errorMessage = 'Unknown error occurred';
      if (error instanceof Error) {
        if (error.message.includes('API key')) {
          errorMessage = 'Invalid API key. Please check your VirusTotal API key configuration.';
        } else if (error.message.includes('timeout')) {
          errorMessage = 'File analysis timed out. Large files may take longer to analyze.';
        } else if (error.message.includes('413')) {
          errorMessage = 'File too large. Maximum file size is 32MB.';
        } else {
          errorMessage = error.message;
        }
      }

      alert(`File scan failed: ${errorMessage}`);

      // Set a mock result for demonstration if API fails
      const mockResult: ScanResult = {
        id: `scan_${Date.now()}`,
        type: 'file',
        input: file.name,
        status: 'failed',
        results: {
          malicious: 0,
          suspicious: 0,
          undetected: 0,
          harmless: 0,
          timeout: 1
        },
        detections: [{
          engine: 'VirusTotal API',
          result: 'Error',
          category: 'API Error',
          method: 'Connection failed',
          community: 'N/A'
        }],
        threatLevel: 'clean',
        timestamp: new Date().toISOString()
      };

      setScanResults(prev => [mockResult, ...prev]);
      setSelectedResult(mockResult);
      setShowResultModal(true);
    } finally {
      setIsScanning(false);
    }
  };

  const handleFileScan = async () => {
    if (!file) return;

    // Increment file scan counter
    setFileScansCount(prev => {
      const newCount = prev + 1;
      console.log(`File scan initiated. Count: ${prev} -> ${newCount}`);
      return newCount;
    });

    setIsScanning(true);
    try {
      // Get API key from environment variables
      const apiKey = import.meta.env.VITE_MALWARE_SCANNER_API_KEY;

      if (!apiKey) {
        console.error('Malware Scanner API key not found. Please check your environment variables.');
        throw new Error('API key not configured');
      }

      // Call VirusTotal API for file analysis
      const formData = new FormData();
      formData.append('file', file);

      const vtResponse = await fetch(`https://www.virustotal.com/api/v3/files`, {
        method: 'POST',
        headers: {
          'x-apikey': apiKey,
        },
        body: formData
      });

      if (!vtResponse.ok) {
        throw new Error(`VirusTotal API error: ${vtResponse.status}`);
      }

      const vtData = await vtResponse.json();
      const analysisId = vtData.data.id;

      // Wait a moment for analysis to start
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Get the analysis results
      const analysisResponse = await fetch(`https://www.virustotal.com/api/v3/analyses/${analysisId}`, {
        headers: {
          'x-apikey': apiKey,
        }
      });

      if (!analysisResponse.ok) {
        throw new Error(`Analysis API error: ${analysisResponse.status}`);
      }

      const analysisData = await analysisResponse.json();

      // Wait for analysis to complete (with timeout)
      let attempts = 0;
      const maxAttempts = 60; // 60 seconds max wait for file analysis

      while (attempts < maxAttempts && analysisData.data.attributes.status !== 'completed') {
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;

        const retryResponse = await fetch(`https://www.virustotal.com/api/v3/analyses/${analysisId}`, {
          headers: {
            'x-apikey': apiKey,
          }
        });

        if (retryResponse.ok) {
          const retryData = await retryResponse.json();
          if (retryData.data.attributes.status === 'completed') {
            analysisData.data = retryData.data;
            break;
          }
        }
      }

      if (analysisData.data.attributes.status !== 'completed') {
        throw new Error('File analysis timed out or failed');
      }

      const attributes = analysisData.data.attributes;
      const stats = attributes.stats;
      const results = attributes.results || {};

      // Convert VirusTotal results to our format
      const detections = Object.entries(results).map(([engine, result]: [string, any]) => ({
        engine: engine,
        result: result.category === 'malicious' ? 'Malicious' :
                result.category === 'suspicious' ? 'Suspicious' : 'Clean',
        category: result.category || 'File Analysis',
        method: result.method || 'API Analysis',
        community: result.category === 'malicious' ? '1/1' : '0/1'
      }));

      const mockResult: ScanResult = {
        id: `scan_${Date.now()}`,
        type: 'file',
        input: file.name,
        status: 'completed',
        results: {
          malicious: stats.malicious || 0,
          suspicious: stats.suspicious || 0,
          undetected: stats.undetected || 0,
          harmless: stats.harmless || 0,
          timeout: stats.timeout || 0
        },
        detections: detections,
        threatLevel: stats.malicious > 0 ? 'high' :
                    stats.suspicious > 0 ? 'medium' : 'clean',
        timestamp: new Date().toISOString()
      };

      setScanResults(prev => [mockResult, ...prev]);
      setSelectedResult(mockResult);
      setShowResultModal(true);
      // Persist file scan input (file name) to Supabase
      // Classify as file if size >= 0.01MB (10,240 bytes)
      const isFile = file.size >= 10240;
      try {
        await securityLogsService.logMalwareScan(file.name, isFile ? 'file' : 'url');
      } catch (persistErr) {
        console.warn('Failed to persist malware file scan:', persistErr);
      }
    } catch (error) {
      console.error('Scan failed:', error);

      // Show user-friendly error message
      let errorMessage = 'Unknown error occurred';
      if (error instanceof Error) {
        if (error.message.includes('API key')) {
          errorMessage = 'Invalid API key. Please check your VirusTotal API key configuration.';
        } else if (error.message.includes('timeout')) {
          errorMessage = 'Analysis timed out. Please try again.';
        } else if (error.message.includes('404')) {
          errorMessage = 'URL not found or analysis failed. Please check the URL and try again.';
        } else {
          errorMessage = error.message;
        }
      }

      alert(`Scan failed: ${errorMessage}`);

      // Set a mock result for demonstration if API fails
      const mockResult: ScanResult = {
        id: `scan_${Date.now()}`,
        type: 'url',
        input: url,
        status: 'failed',
        results: {
          malicious: 0,
          suspicious: 0,
          undetected: 0,
          harmless: 0,
          timeout: 1
        },
        detections: [{
          engine: 'VirusTotal API',
          result: 'Error',
          category: 'API Error',
          method: 'Connection failed',
          community: 'N/A'
        }],
        threatLevel: 'clean',
        timestamp: new Date().toISOString()
      };

      setScanResults(prev => [mockResult, ...prev]);
      setSelectedResult(mockResult);
      setShowResultModal(true);
    } finally {
      setIsScanning(false);
    }
  };

  const getThreatLevelColor = (level: string) => {
    switch (level) {
      case 'clean': return 'text-green-600';
      case 'low': return 'text-yellow-600';
      case 'medium': return 'text-orange-600';
      case 'high': return 'text-red-600';
      case 'critical': return 'text-red-800';
      default: return 'text-gray-600';
    }
  };

  const getThreatLevelIcon = (level: string) => {
    switch (level) {
      case 'clean': return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'low': return <AlertTriangle className="h-5 w-5 text-yellow-600" />;
      case 'medium': return <AlertTriangle className="h-5 w-5 text-orange-600" />;
      case 'high': return <XCircle className="h-5 w-5 text-red-600" />;
      case 'critical': return <XCircle className="h-5 w-5 text-red-800" />;
      default: return <Shield className="h-5 w-5 text-gray-600" />;
    }
  };

  return (
    <div className="min-h-screen">
      <SEO
        title="Malware & Phishing Scanner | VirusTotal Alternative | AEDI Security Kenya"
        description="Advanced malware and phishing detection scanner. Upload files or scan URLs for threats using multiple antivirus engines. Professional cybersecurity analysis by AEDI Security."
        keywords="Malware Scanner, Phishing Detection, VirusTotal Alternative, File Scanner, URL Scanner, Cybersecurity Analysis, Threat Detection, Antivirus Scan, AEDI Security Kenya"
        url="https://aedisecurity.com/check-breach/malware-scanner"
      />
      <Navigation />

      {/* Hero Section */}
      <section className="relative h-[600px] overflow-hidden">
        <div
          className="absolute inset-0 bg-cover bg-center bg-no-repeat"
          style={{ backgroundImage: `url(${malwareHeroImage})` }}
        />
        <div className="absolute inset-0 bg-black/50"></div>

        <div className="relative h-full flex items-center justify-center">
          <div className="text-center text-white max-w-4xl mx-auto px-4">
            <div className="flex justify-center mb-6">
              <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center">
                <Shield className="h-10 w-10 text-white" />
              </div>
            </div>

            <h1 className="text-4xl md:text-6xl font-bold mb-6 fade-in">
              Malware & Phishing Scanner
            </h1>

            <p className="text-lg md:text-xl mb-8 max-w-2xl mx-auto fade-in">
              Advanced threat detection powered by multiple antivirus engines.
              Scan files and URLs for malware, viruses, and phishing threats.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                size="lg"
                className="primary-gradient glow-primary text-white font-semibold px-8 py-3 hover:scale-105 transition-transform duration-200"
              >
                <Search className="h-5 w-5 mr-2" />
                Start Scanning
              </Button>
              <Button
                variant="outline"
                size="lg"
                onClick={() => setShowLearnMoreModal(true)}
                className="border-white text-cyber-dark bg-white hover:bg-gray-100 hover:text-cyber-dark px-8 py-3 transition-all duration-300"
              >
                <FileText className="h-5 w-5 mr-2" />
                Learn More
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Scan Statistics */}
      <section className="py-12 bg-gradient-to-r from-blue-50 to-purple-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-8">
            <h2 className="text-2xl md:text-3xl font-bold text-foreground mb-2">
              Scan Statistics
            </h2>
            <p className="text-muted-foreground">
              Total scans performed by our community
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto">
            <Card className="shadow-card text-center bg-white/80 backdrop-blur-sm">
              <CardContent className="p-6">
                <div className="flex items-center justify-center mb-4">
                  <Globe className="h-8 w-8 text-blue-600 mr-3" />
                  <div className="text-left">
                    <div className="text-3xl font-bold text-blue-600">
                      {(liveMalwareUrlScans ?? 0).toLocaleString()}
                    </div>
                    <div className="text-sm text-blue-600 font-medium">
                      URL Links Scanned
                    </div>
                    <div className="text-xs text-blue-500 mt-1">
                      {statsLoading ? 'Loading‚Ä¶' : statsError ? 'Unavailable' : 'Live URL count'}
                    </div>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  Websites and URLs analyzed for threats
                </p>
              </CardContent>
            </Card>

            <Card className="shadow-card text-center bg-white/80 backdrop-blur-sm">
              <CardContent className="p-6">
                <div className="flex items-center justify-center mb-4">
                  <FileText className="h-8 w-8 text-green-600 mr-3" />
                  <div className="text-left">
                    <div className="text-3xl font-bold text-green-600">
                      {(liveMalwareFileScans ?? 0).toLocaleString()}
                    </div>
                    <div className="text-sm text-green-600 font-medium">
                      Files Scanned
                    </div>
                    <div className="text-xs text-green-500 mt-1">
                      {statsLoading ? 'Loading‚Ä¶' : statsError ? 'Unavailable' : 'Live file count'}
                    </div>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  Files and documents analyzed for malware
                </p>
              </CardContent>
            </Card>
          </div>

        </div>
      </section>

      {/* Scanner Interface */}
      <section className="py-16 bg-background">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
              Advanced Scanning Interface
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              Professional-grade malware detection with intuitive controls and real-time analysis
            </p>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2 mb-8">
              <TabsTrigger value="file" className="flex items-center space-x-2">
                <Upload className="h-4 w-4" />
                <span>File Scanner</span>
              </TabsTrigger>
              <TabsTrigger value="url" className="flex items-center space-x-2">
                <LinkIcon className="h-4 w-4" />
                <span>URL Scanner</span>
              </TabsTrigger>
            </TabsList>

            <TabsContent value="file" className="space-y-6">
              <Card className="shadow-card">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Upload className="h-6 w-6 text-primary" />
                    <span>File Upload Scanner</span>
                  </CardTitle>
                  <CardDescription>
                    Upload files up to 32MB for comprehensive malware analysis
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div
                    className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                      isDragOver
                        ? 'border-blue-400 bg-blue-50'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                  >
                    <Upload className={`h-12 w-12 mx-auto mb-4 transition-colors ${
                      isDragOver ? 'text-blue-500' : 'text-gray-400'
                    }`} />
                    <p className="text-lg font-medium text-gray-900 mb-2">
                      {isDragOver ? 'Drop your file here' : 'Drop your file here or click to browse'}
                    </p>
                    <p className="text-gray-500 mb-4">
                      Supports: EXE, PDF, DOC, ZIP, APK, and more (max 32MB)
                    </p>
                    <Input
                      type="file"
                      onChange={handleFileUpload}
                      className="hidden"
                      id="file-upload"
                      accept=".exe,.pdf,.doc,.docx,.zip,.rar,.apk,.jar,.js,.html,.php,.txt,.jpg,.jpeg,.png,.gif,.mp4,.avi,.mov,.docx,.xlsx,.pptx"
                    />
                    <label
                      htmlFor="file-upload"
                      className="cursor-pointer inline-block"
                    >
                      <Button
                        variant="outline"
                        className="cursor-pointer hover:bg-gray-50"
                        type="button"
                        onClick={() => {
                          const fileInput = document.getElementById('file-upload') as HTMLInputElement;
                          fileInput?.click();
                        }}
                      >
                        Choose File
                      </Button>
                    </label>
                  </div>

                  {file && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <FileText className="h-8 w-8 text-blue-600" />
                          <div>
                            <p className="font-medium text-blue-900">{file.name}</p>
                            <p className="text-sm text-blue-600">
                              {(file.size / 1024 / 1024).toFixed(2)} MB
                            </p>
                          </div>
                        </div>
                        <Button
                          onClick={handleFileScan}
                          disabled={isScanning}
                          className="primary-gradient text-white"
                        >
                          {isScanning ? (
                            <div className="flex items-center space-x-2">
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                              <span>Scanning...</span>
                            </div>
                          ) : (
                            <div className="flex items-center space-x-2">
                              <Search className="h-4 w-4" />
                              <span>Scan File</span>
                            </div>
                          )}
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="url" className="space-y-6">
              <Card className="shadow-card">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Globe className="h-6 w-6 text-primary" />
                    <span>URL Scanner</span>
                  </CardTitle>
                  <CardDescription>
                    Scan websites and URLs for malware, phishing, and malicious content
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex space-x-4">
                    <Input
                      type="url"
                      placeholder="https://example.com/suspicious-file.exe"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                      className="flex-1"
                    />
                    <Button
                      onClick={handleUrlScan}
                      disabled={!url.trim() || isScanning}
                      className="primary-gradient text-white"
                    >
                      {isScanning ? (
                        <div className="flex items-center space-x-2">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                          <span>Scanning...</span>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-2">
                          <Search className="h-4 w-4" />
                          <span>Scan URL</span>
                        </div>
                      )}
                    </Button>
                  </div>

                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 mb-2">What we check:</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span>Malware signatures</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span>Phishing indicators</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span>Suspicious redirects</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span>Blacklist status</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </section>

      {/* Recent Scans */}
      {scanResults.length > 0 && (
        <section className="py-16 bg-background">
          <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-12">
              <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
                Recent Scan Results
              </h2>
              <p className="text-xl text-muted-foreground">
                Your scan history and detailed analysis reports
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {scanResults.map((result) => (
                <Card key={result.id} className="shadow-card hover:shadow-hero transition-all duration-300 cursor-pointer"
                       onClick={() => {
                         setSelectedResult(result);
                         setShowResultModal(true);
                       }}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {result.type === 'file' ? (
                          <FileText className="h-5 w-5 text-primary" />
                        ) : (
                          <Globe className="h-5 w-5 text-primary" />
                        )}
                        <CardTitle className="text-lg">
                          {result.type === 'file' ? 'File Scan' : 'URL Scan'}
                        </CardTitle>
                      </div>
                      {getThreatLevelIcon(result.threatLevel)}
                    </div>
                    <CardDescription className="truncate">
                      {result.input}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Status:</span>
                        <span className={`font-medium ${getThreatLevelColor(result.threatLevel)}`}>
                          {result.threatLevel.toUpperCase()}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Engines:</span>
                        <span className="font-medium">
                          {result.results.malicious + result.results.suspicious + result.results.undetected + result.results.harmless}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Detections:</span>
                        <span className="font-medium text-red-600">
                          {result.results.malicious}
                        </span>
                      </div>
                      <div className="flex items-center justify-between pt-2 border-t">
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Clock className="h-3 w-3" />
                          <span>{new Date(result.timestamp).toLocaleDateString()}</span>
                        </div>
                        <Button variant="ghost" size="sm">
                          <ExternalLink className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Features Section */}
      <section className="py-16 bg-background">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
              Why Choose Our Scanner?
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              Professional-grade malware detection with enterprise-level accuracy
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            <Card className="shadow-card text-center">
              <CardHeader>
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Database className="h-6 w-6 text-blue-600" />
                </div>
                <CardTitle>50+ Engines</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">
                  Powered by leading antivirus engines including Microsoft, Kaspersky, and ESET
                </p>
              </CardContent>
            </Card>

            <Card className="shadow-card text-center">
              <CardHeader>
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Activity className="h-6 w-6 text-green-600" />
                </div>
                <CardTitle>Real-time</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">
                  Instant scanning with real-time results and threat intelligence updates
                </p>
              </CardContent>
            </Card>

            <Card className="shadow-card text-center">
              <CardHeader>
                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Shield className="h-6 w-6 text-purple-600" />
                </div>
                <CardTitle>Comprehensive</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">
                  Detects viruses, malware, ransomware, spyware, and phishing attempts
                </p>
              </CardContent>
            </Card>

            <Card className="shadow-card text-center">
              <CardHeader>
                <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Download className="h-6 w-6 text-orange-600" />
                </div>
                <CardTitle>Detailed Reports</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">
                  Comprehensive analysis reports with threat details and recommendations
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Result Modal */}
      <Dialog open={showResultModal} onOpenChange={setShowResultModal}>
        <DialogContent className="sm:max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              {selectedResult && getThreatLevelIcon(selectedResult.threatLevel)}
              <span>Scan Results</span>
            </DialogTitle>
          </DialogHeader>

          {selectedResult && (
            <div className="space-y-6">
              {/* Scan Overview */}
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                <div className="text-center p-4 bg-red-50 rounded-lg">
                  <div className="text-2xl font-bold text-red-600">
                    {selectedResult.results.malicious}
                  </div>
                  <div className="text-sm text-red-600">Malicious</div>
                </div>
                <div className="text-center p-4 bg-orange-50 rounded-lg">
                  <div className="text-2xl font-bold text-orange-600">
                    {selectedResult.results.suspicious}
                  </div>
                  <div className="text-sm text-orange-600">Suspicious</div>
                </div>
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-600">
                    {selectedResult.results.undetected}
                  </div>
                  <div className="text-sm text-gray-600">Undetected</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    {selectedResult.results.harmless}
                  </div>
                  <div className="text-sm text-green-600">Harmless</div>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {selectedResult.results.timeout}
                  </div>
                  <div className="text-sm text-blue-600">Timeout</div>
                </div>
              </div>

              {/* Threat Level */}
              <div className="flex items-center justify-center space-x-2 p-4 rounded-lg bg-gray-50">
                <span className="text-lg font-medium">Threat Level:</span>
                <div className={`flex items-center space-x-2 ${getThreatLevelColor(selectedResult.threatLevel)}`}>
                  {getThreatLevelIcon(selectedResult.threatLevel)}
                  <span className="font-bold text-lg">
                    {selectedResult.threatLevel.toUpperCase()}
                  </span>
                </div>
              </div>

              {/* Security Vendors Analysis Table */}
              {selectedResult.detections.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold mb-3">Security Vendors' Analysis</h3>
                  <div className="border rounded-lg overflow-hidden">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-1/3">Detection</TableHead>
                          <TableHead className="w-1/3">Details</TableHead>
                          <TableHead className="w-1/3">Community</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedResult.detections.map((detection, index) => (
                          <TableRow key={index}>
                            <TableCell>
                              <div className="space-y-1">
                                <div className="font-medium">{detection.engine}</div>
                                <div className={`text-sm px-2 py-1 rounded-full inline-block ${
                                  detection.result === 'Clean'
                                    ? 'bg-green-100 text-green-800'
                                    : detection.result === 'Malicious'
                                    ? 'bg-red-100 text-red-800'
                                    : 'bg-yellow-100 text-yellow-800'
                                }`}>
                                  {detection.result}
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="space-y-1">
                                <div className="text-sm font-medium">{detection.category}</div>
                                <div className="text-xs text-muted-foreground">{detection.method}</div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="text-sm">
                                {detection.community || 'N/A'}
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </div>
              )}

              {/* Link Details */}
              {selectedResult.type === 'url' && (
                <div>
                  <h3 className="text-lg font-semibold mb-3">Link Details</h3>
                  <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <span className="font-medium text-gray-700">URL:</span>
                        <div className="mt-1 p-2 bg-white rounded border text-sm break-all">
                          {selectedResult.input}
                        </div>
                      </div>
                      <div>
                        <span className="font-medium text-gray-700">Domain:</span>
                        <div className="mt-1 p-2 bg-white rounded border text-sm">
                          {(() => {
                            try {
                              return new URL(selectedResult.input).hostname || 'N/A';
                            } catch {
                              return 'Invalid URL';
                            }
                          })()}
                        </div>
                      </div>
                      <div>
                        <span className="font-medium text-gray-700">Protocol:</span>
                        <div className="mt-1 p-2 bg-white rounded border text-sm">
                          {(() => {
                            try {
                              return new URL(selectedResult.input).protocol.replace(':', '') || 'N/A';
                            } catch {
                              return 'Invalid URL';
                            }
                          })()}
                        </div>
                      </div>
                      <div>
                        <span className="font-medium text-gray-700">Port:</span>
                        <div className="mt-1 p-2 bg-white rounded border text-sm">
                          {(() => {
                            try {
                              return new URL(selectedResult.input).port || 'Default';
                            } catch {
                              return 'N/A';
                            }
                          })()}
                        </div>
                      </div>
                    </div>
                    <div>
                      <span className="font-medium text-gray-700">Path:</span>
                      <div className="mt-1 p-2 bg-white rounded border text-sm break-all">
                        {(() => {
                          try {
                            return new URL(selectedResult.input).pathname || '/';
                          } catch {
                            return 'N/A';
                          }
                        })()}
                      </div>
                    </div>
                    {(() => {
                      try {
                        const search = new URL(selectedResult.input).search;
                        return search && (
                          <div>
                            <span className="font-medium text-gray-700">Parameters:</span>
                            <div className="mt-1 p-2 bg-white rounded border text-sm break-all">
                              {search}
                            </div>
                          </div>
                        );
                      } catch {
                        return null;
                      }
                    })()}
                  </div>
                </div>
              )}

              {/* Community Information */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Community</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-blue-50 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-blue-600 mb-2">
                      {selectedResult.results.harmless + selectedResult.results.undetected}
                    </div>
                    <div className="text-sm text-blue-600">Clean Votes</div>
                    <div className="text-xs text-blue-500 mt-1">
                      Community members who marked this as safe
                    </div>
                  </div>
                  <div className="bg-red-50 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-red-600 mb-2">
                      {selectedResult.results.malicious}
                    </div>
                    <div className="text-sm text-red-600">Malicious Votes</div>
                    <div className="text-xs text-red-500 mt-1">
                      Community members who reported this as malicious
                    </div>
                  </div>
                  <div className="bg-yellow-50 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-yellow-600 mb-2">
                      {selectedResult.results.suspicious}
                    </div>
                    <div className="text-sm text-yellow-600">Suspicious Votes</div>
                    <div className="text-xs text-yellow-500 mt-1">
                      Community members who found this suspicious
                    </div>
                  </div>
                </div>
                <div className="mt-4 bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-2">Community Reputation</h4>
                  <div className="flex items-center space-x-4 text-sm">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-gray-600">Trusted by {selectedResult.results.harmless + selectedResult.results.undetected} sources</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                      <span className="text-gray-600">Flagged by {selectedResult.results.malicious} sources</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Scan Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium">Scan Type:</span>
                  <span className="ml-2 capitalize">{selectedResult.type}</span>
                </div>
                <div>
                  <span className="font-medium">Scan Date:</span>
                  <span className="ml-2">
                    {new Date(selectedResult.timestamp).toLocaleString()}
                  </span>
                </div>
                <div>
                  <span className="font-medium">Input:</span>
                  <span className="ml-2 truncate">{selectedResult.input}</span>
                </div>
                <div>
                  <span className="font-medium">Scan ID:</span>
                  <span className="ml-2 font-mono text-xs">{selectedResult.id}</span>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Learn More Modal */}
      <Dialog open={showLearnMoreModal} onOpenChange={setShowLearnMoreModal}>
        <DialogContent className="sm:max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2 text-2xl">
              <Shield className="h-6 w-6 text-blue-600" />
              <span>Why Malware & Phishing Scanning Matters</span>
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-6 text-gray-700">
            {/* Introduction */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg">
              <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <AlertTriangle className="h-5 w-5 text-orange-600 mr-2" />
                The Critical Role of Threat Detection
              </h3>
              <p className="text-lg leading-relaxed">
                Scanning for malware and phishing plays a vital role in protecting both personal and organizational digital assets from cyber threats. Malware, which includes viruses, worms, ransomware, spyware, and trojans, can infiltrate computers and networks to steal sensitive data, corrupt files, slow down system performance, or even render devices unusable.
              </p>
            </div>

            {/* Malware Section */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3 flex items-center">
                <XCircle className="h-5 w-5 text-red-600 mr-2" />
                Understanding Malware Threats
              </h3>
              <div className="bg-red-50 p-4 rounded-lg mb-4">
                <p className="mb-3">
                  Regular malware scans act as a preventive measure by detecting and removing such malicious programs before they cause harm. Similarly, phishing attacks are designed to trick users into revealing confidential information such as passwords, financial details, or login credentials by disguising fraudulent emails, messages, or websites as legitimate ones.
                </p>
                <p>
                  Scanning for phishing attempts helps identify these deceptive links and emails, alerting users before they unknowingly compromise their data.
                </p>
              </div>
            </div>

            {/* Benefits Section */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3 flex items-center">
                <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
                Long-term Cybersecurity Benefits
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-green-800 mb-2">üîí Data Protection</h4>
                  <p className="text-sm">
                    Consistent scanning not only protects against immediate cyber threats but also contributes to long-term cybersecurity hygiene. It reduces the likelihood of costly data breaches, identity theft, and financial losses.
                  </p>
                </div>
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">üìã Compliance</h4>
                  <p className="text-sm">
                    For organizations, it helps maintain compliance with data protection laws and cybersecurity regulations, which is essential for avoiding legal penalties and sustaining customer trust.
                  </p>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-purple-800 mb-2">‚ö° System Integrity</h4>
                  <p className="text-sm">
                    Furthermore, early detection of threats minimizes system downtime and prevents reputational damage that can arise from publicized cyber incidents.
                  </p>
                </div>
                <div className="bg-orange-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-orange-800 mb-2">üõ°Ô∏è Proactive Defense</h4>
                  <p className="text-sm">
                    By integrating regular malware and phishing scans into routine IT practices, individuals and businesses create a proactive defense strategy.
                  </p>
                </div>
              </div>
            </div>

            {/* Key Outcomes */}
            <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-lg">
              <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <Activity className="h-5 w-5 text-blue-600 mr-2" />
                Key Outcomes of Regular Scanning
              </h3>
              <div className="space-y-3">
                <div className="flex items-start space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                  <span>Ensuring systems remain secure and operations run smoothly</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                  <span>Quickly identifying and mitigating emerging cyber risks</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                  <span>Preserving the integrity and confidentiality of personal or business information</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                  <span>Maintaining customer trust and avoiding reputational damage</span>
                </div>
              </div>
            </div>

            {/* Call to Action */}
            <div className="bg-gradient-to-r from-cyber-dark to-blue-600 text-white p-6 rounded-lg text-center">
              <h3 className="text-xl font-semibold mb-3">
                Start Protecting Your Digital Assets Today
              </h3>
              <p className="mb-4">
                Don't wait for a cyber incident to occur. Take proactive steps to secure your digital environment with our advanced malware and phishing detection scanner.
              </p>
              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                <Button
                  onClick={() => {
                    setShowLearnMoreModal(false);
                    setActiveTab('file');
                  }}
                  className="bg-white text-cyber-dark hover:bg-gray-100"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Scan Files
                </Button>
                <Button
                  onClick={() => {
                    setShowLearnMoreModal(false);
                    setActiveTab('url');
                  }}
                  className="bg-white text-cyber-dark hover:bg-gray-100"
                >
                  <Globe className="h-4 w-4 mr-2" />
                  Scan URLs
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Footer />
    </div>
  );
};

export default MalwareScanner;